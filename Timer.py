# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import time
import asyncio
from PyQt5.QtCore import Qt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import os
import datetime
from datetime import datetime

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        self.timer_on = False
        Dialog.setObjectName("Dialog")
        Dialog.setEnabled(True)
        Dialog.resize(408, 160)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Dialog.sizePolicy().hasHeightForWidth())
        Dialog.setSizePolicy(sizePolicy)
        Dialog.setMouseTracking(False)
        Dialog.setStyleSheet("background-color: rgb(47, 47, 47);")
        Dialog.setFixedSize(408, 160)
        Dialog.setWindowFlags(Qt.CustomizeWindowHint | Qt.WindowMinimizeButtonHint | Qt.WindowCloseButtonHint)
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(110, 90, 191, 51))
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setStyleSheet("\n"
"QPushButton{\n"
"    background-color: rgb(116, 116, 116);\n"
"    border: 0px;\n"
"    border-radius: 15px;\n"
"    color: rgb(255, 255, 255);\n"
"    font: 75 11pt \"NanumGothicExtraBold\";\n"
"    font: 87 10pt \"Arial Black\";\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgb(100, 100, 100);\n"
"}\n"
"QPushButton:pressed{\n"
"    background-color: rgb(90, 90, 90);\n"
"}")
        self.pushButton.setObjectName("pushButton")
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(110, 40, 91, 21))
        self.lineEdit.setStyleSheet("background-color: rgb(109, 109, 109);\n"
"border: 0px;\n"
"border-radius: 5px;\n"
"font: 87 10pt \"Arial Black\";\n"
"color: rgb(255, 255, 255);")
        self.lineEdit.setFrame(True)
        self.lineEdit.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setMaxLength(2) # ограничиваем максимальную длину ввода до 2 символов
        validator = QtGui.QIntValidator(0, 24, self.lineEdit) # создаем валидатор для ограничения диапазона вводимых значений
        self.lineEdit.setValidator(validator) # устанавливаем валидатор для QLineEdit
            
        self.lineEdit_2 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_2.setGeometry(QtCore.QRect(210, 40, 91, 21))
        self.lineEdit_2.setStyleSheet("background-color: rgb(109, 109, 109);\n"
"border: 0px;\n"
"border-radius: 5px;\n"
"font: 87 10pt \"Arial Black\";\n"
"color: rgb(255, 255, 255);")
        self.lineEdit_2.setFrame(True)
        self.lineEdit_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_2.setMaxLength(2)
        validator_2 = QtGui.QIntValidator(0, 60, self.lineEdit) # создаем валидатор для ограничения диапазона вводимых значений
        self.lineEdit_2.setValidator(validator_2) # устанавливаем валидатор для QLineEdit
        
        
        
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(175, 30, 61, 41))
        self.label.setStyleSheet("font: 87 10pt \"Arial Black\";\n"
"color: rgb(255, 255, 255);\n"
"background-color: rgba(255, 255, 255, 0);")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label.raise_()
        self.pushButton.raise_()
        self.lineEdit.raise_()
        self.lineEdit_2.raise_()  

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)   

        
    def on_pushButton_clicked(self):
        if self.timer_on == True:
                # Остановить таймер
                self.pushButton.setText("Включить")
                self.pushButton.setStyleSheet("\n"
"QPushButton{\n"
"    background-color: rgb(116, 116, 116);\n"
"    border: 0px;\n"
"    border-radius: 15px;\n"
"    color: rgb(255, 255, 255);\n"
"    font: 75 11pt \"NanumGothicExtraBold\";\n"
"    font: 87 10pt \"Arial Black\";\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgb(100, 100, 100);\n"
"}\n"
"QPushButton:pressed{\n"
"    background-color: rgb(90, 90, 90);\n"
"}")  # Вернуть исходный стиль кнопки
                self.timer_on = False
                os.system(f"shutdown /a")
                print("таймер остановлен")
                # Отменить ожидание
                # ...

        else:
            if self.lineEdit.text() and self.lineEdit_2.text():
                # Получить значение часов и минут из QLineEdit
                hours = int(self.lineEdit.text())
                minutes = int(self.lineEdit_2.text())

        # Проверить, соответствует ли время формату 24-часового времени
                if 0 <= hours <= 23 and 0 <= minutes <= 59:
                        self.pushButton.setStyleSheet("\n"
"QPushButton{\n"
"    background-color: rgba(172, 255, 175, 200);\n"
"    border: 0px;\n"
"    border-radius: 15px;\n"
"    color: rgb(255, 255, 255);\n"
"    font: 75 11pt \"NanumGothicExtraBold\";\n"
"    font: 87 10pt \"Arial Black\";\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgba(150, 230, 150, 200);\n"
"}\n"
"QPushButton:pressed{\n"
"    background-color: rgba(255, 0, 0, 180);\n"
"}")   # Изменить стиль кнопки
                        self.pushButton.setText("Выключить")
                        self.timer_on = True
            # Вычисляем количество секунд до указанного времени
                        # задаем целевое время в формате "часы:минуты"
                        
                        target_time = str(str(hours)+":"+str(minutes))
                        print(target_time)

                        # получаем текущее время в формате "часы:минуты"
                        current_time = datetime.now().strftime("%H:%M")

                        # разбиваем целевое время на часы и минуты
                        target_hours, target_minutes = map(int, target_time.split(":"))

                        # разбиваем текущее время на часы и минуты
                        current_hours, current_minutes = map(int, current_time.split(":"))

                        # вычисляем сколько осталось минут до целевого времени
                        if target_hours >= current_hours:
                                minutes_left = (target_hours - current_hours) * 60 + (target_minutes - current_minutes)
                        else:
                                minutes_left = (24 + target_hours - current_hours) * 60 + (target_minutes - current_minutes)

                        print(f"До {target_time} осталось {minutes_left} минут")
                        
                        if minutes_left >= 0:
                                shutdown_delay_seconds = minutes_left * 60
                                os.system(f"shutdown /s /t {shutdown_delay_seconds}")
                          
                        
                else:
                        # Вывести сообщение об ошибке
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Warning)
                        msg.setText("Ошибка: некорректное время!")
                        msg.setWindowTitle("Ошибка")
                        msg.exec_()
            else:
                        # Вывести сообщение об ошибке
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setText("Ошибка: некорректное время!")
                msg.setWindowTitle("Ошибка")
                msg.exec_()

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Timer", "Timer"))
        self.pushButton.setText(_translate("Dialog", "Включить"))
        self.label.setText(_translate("Dialog", ":"))
        self.pushButton.clicked.connect(self.on_pushButton_clicked)    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
